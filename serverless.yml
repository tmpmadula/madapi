service: madapi

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-offline-dynamodb-stream
  #- serverless-add-api-key

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: af-south-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:ListTables
        - dynamodb:DescribeTable
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
        - dynamodb:GetShardIterator
        - dynamodb:BatchGetItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:DescribeReservedCapacity
        - dynamodb:DescribeReservedCapacityOfferings
        - dynamodb:GetRecords
      Resource: 'arn:aws:dynamodb:af-south-1:*:table/*'
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource: 'arn:aws:execute-api:*:*:*/development/POST/@connections/*'
   

functions:
  queryAll:
    handler: src/handler.handleHttp
    events:
      - http:
          path: /
          method: any
          cors: true
    environment:
      USER_TABLE: ${self:custom.bloguser}
      ARTICLE_TABLE: ${self:custom.articles}
      COMMENTS_TABLE: ${self:custom.blogcomments}
      MESSAGE_TABLE: ${self:custom.blogmessage}
      NOTIFICATION_TABLE: ${self:custom.blognotification}
 
  graphQLPlayground:
    handler: src/handler.playgroundHandler
    events:
      - http:
          method: get
          path: '/playground'
          cors: true

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/s3-bucket.yml)}

custom:
  #apiGateway:
   # apiKeySourceType: HEADER
  #apiKeys:
   # dev:
    #  - name: LockMadoola
   # prod:
   #   - name: name1
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
      - test
      - prod
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  bloguser: ${self:custom.stage}-bloguser
  blogcomments: ${self:custom.stage}-blogcomments
  articles: ${self:custom.stage}-articles
  messageTable: ${self:custom.stage}-blogmessage
  notificationTable: ${self:custom.stage}-blognotification

